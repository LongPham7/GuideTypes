#!/usr/bin/env python3

import torch
from torch.distributions import constraints
import pyro
import pyro.distributions as dist
from pyro.infer import SVI, Trace_ELBO
import pyro.optim as optim
from greenlet import greenlet
import time


def timeit(f, *args, **kwargs):
    t1 = time.time()
    ret = f(*args, **kwargs)
    t2 = time.time()
    return (ret, t2 - t1)


def test(cond_model, guide):
    pyro.clear_param_store()
    svi = SVI(model=cond_model, guide=guide, optim=optim.SGD({"lr": 0.001, "momentum":0.1}), loss=Trace_ELBO())

    losses = []
    num_steps = 2500
    for t in range(num_steps):
        losses.append(svi.step())


{{ GENERATED }}


def model():
    wm = Wrapper_for_Model()
    return wm.run()


def guide():
    p_a = pyro.param("a", torch.tensor(8.5))
    p_b = pyro.param("b", torch.tensor(1.), constraint=constraints.positive)
    pm = Proposal_for_Model()
    pm.run(p_a, p_b)


cond_model = pyro.condition(model, data={"obs_1": torch.tensor(9.5)})


_, gi = timeit(test, cond_model, guide)
print("generated code inference time: %fs" % gi)


{{ HANDWRITTEN }}


cond_hmodel = pyro.condition(hmodel, data={"measurement": torch.tensor(9.5)})


_, gi = timeit(test, cond_hmodel, hguide)
print("hand-written code inference time: %fs" % gi)
