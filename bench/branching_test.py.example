#!/usr/bin/env python3

import torch
import pyro
import pyro.distributions as dist
from pyro.infer import EmpiricalMarginal, Importance
from greenlet import greenlet
import time


def timeit(f, *args, **kwargs):
    t1 = time.time()
    ret = f(*args, **kwargs)
    t2 = time.time()
    return (ret, t2 - t1)


def test(cond_model, guide):
    importance = Importance(model=cond_model, guide=guide, num_samples=10000)
    emp_dist = EmpiricalMarginal(importance.run())


def fib(n):
    a, b = 1, 1
    i = 0
    while i < n:
        i = i + 1
        a, b = b, a + b
    return a


{{ GENERATED }}


def model():
    wm = Wrapper_for_Model()
    return wm.run()


def guide():
    pm = Proposal_for_Model()
    pm.run()


cond_model = pyro.condition(model, data={"obs_1": torch.tensor(6.0)})


_, gi = timeit(test, cond_model, guide)
print("generated code inference time: %fs" % gi)


{{ HANDWRITTEN }}


cond_hmodel = pyro.condition(hmodel, data={"y": torch.tensor(6.0)})


_, gi = timeit(test, cond_hmodel, hguide)
print("hand-written code inference time: %fs" % gi)
