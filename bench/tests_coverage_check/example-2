type Old_trace
type Old_traceG
type Latent
type LatentG
type LatentG_no_old

type Init_type = ureal_u /\ Old_traceG_uncovered[$]
type Old_traceG_uncovered = ureal_u /\ &{ preal_u /\ $ | Old_traceG_uncovered[Old_traceG_uncovered[$]] }

proc GuidePcfg1() -> unit | old : Old_trace | lat : Latent = {
  _ <- observe{old}(UNIF);
  k <- sample{lat}(SAME(ureal));
  GuidePcfgGen1(0)
}

proc GuidePcfg2() -> unit | old : Old_trace | lat : Latent = {
  _ <- observe{old}(UNIF);
  k <- sample{lat}(UNIF);
  GuidePcfgGen2(0)
}

proc GuidePcfgGen1(dep: nat) -> unit | old : Old_traceG | lat : LatentG = {
  _ <- observe{old}(UNIF);
  u <- sample{lat}(SAME(ureal));
  if{lat} . then
    if{old} . then
      _ <- observe{old}(GAMMA(dep; 1));
      _ <- sample{lat}(GAMMA(dep; 1));
      return ()
    else
      _ <- sample{lat}(GAMMA(dep; 1));
      return ()
  else
    if{old} . then
      _ <- GuidePcfgGen1(dep + 1);
      _ <- GuidePcfgGen1(dep + 2);
      return ()
    else
      _ <- GuidePcfgGen_no_old(dep + 1);
      _ <- GuidePcfgGen_no_old(dep + 2);
      return ()
}

proc GuidePcfgGen2(dep: nat) -> unit | old : Old_traceG | lat : LatentG = {
  _ <- observe{old}(UNIF);
  u <- sample{lat}(UNIF);
  if{lat} . then
    if{old} . then
      _ <- observe{old}(GAMMA(dep; 1));
      _ <- sample{lat}(SAME(preal));
      return ()
    else
      _ <- sample{lat}(GAMMA(dep; 1));
      return ()
  else
    if{old} . then
      _ <- GuidePcfgGen2(dep + 1);
      _ <- GuidePcfgGen2(dep + 2);
      return ()
    else
      _ <- GuidePcfgGen_no_old(dep + 1);
      _ <- GuidePcfgGen_no_old(dep + 2);
      return ()
}

proc GuidePcfgGen_no_old(dep: nat) -> unit | . | lat : LatentG_no_old = {
  u <- sample{lat}(UNIF);
  if{lat} . then
    _ <- sample{lat}(GAMMA(dep; 1));
    return ()
  else
    _ <- GuidePcfgGen_no_old(dep + 1);
    _ <- GuidePcfgGen_no_old(dep + 2);
    return ()
}

Initial_type: Init_type
Guide_composition: GuidePcfg1; GuidePcfg2
