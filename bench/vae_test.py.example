#!/usr/bin/env python3

import torch
from torch.distributions import constraints
import torchvision.datasets as dset
import torch.nn as nn
import torchvision.transforms as transforms
import pyro
import pyro.distributions as dist
from pyro.infer import SVI, Trace_ELBO
import pyro.optim as optim
from greenlet import greenlet
import time


pyro.distributions.enable_validation(False)


def timeit(f, *args, **kwargs):
    t1 = time.time()
    ret = f(*args, **kwargs)
    t2 = time.time()
    return (ret, t2 - t1)


def test(cond_model, guide):
    pyro.clear_param_store()
    svi = SVI(model=cond_model, guide=guide, optim=optim.Adam({"lr": 1.0e-3}), loss=Trace_ELBO())

    losses = []
    num_steps = 100
    for t in range(num_steps):
        losses.append(svi.step())


def setup_data_loaders(batch_size=128, use_cuda=False):
    root = './data'
    download = True
    trans = transforms.ToTensor()
    train_set = dset.MNIST(root=root, train=True, transform=trans,
                           download=download)
    test_set = dset.MNIST(root=root, train=False, transform=trans)

    kwargs = {'num_workers': 0, 'pin_memory': use_cuda}
    train_loader = torch.utils.data.DataLoader(dataset=train_set,
        batch_size=batch_size, shuffle=True, **kwargs)
    test_loader = torch.utils.data.DataLoader(dataset=test_set,
        batch_size=batch_size, shuffle=False, **kwargs)
    return train_loader, test_loader


train_loader, test_loader = setup_data_loaders(batch_size=256)
for x, _ in train_loader:
    break
x = x.reshape(-1, 784)
data = { "obs_" + str(i + 1): x[i] for i in range(256) }


zeros50 = torch.zeros(50)
ones50 = torch.ones(50)
def mulmv400x50(m):
    def clo(v):
        return m.mv(v)
    return clo
def mulmv784x400(m):
    def clo(v):
        return m.mv(v)
    return clo
def softplus400(v):
    return nn.Softplus()(v)
def sigmoid784(v):
    return nn.Sigmoid()(v)
def mulmv400x784(m):
    def clo(v):
        return m.mv(v)
    return clo
def mulmv50x400(m):
    def clo(v):
        return m.mv(v)
    return clo
def exp50(v):
    return torch.exp(v)


{{ GENERATED }}


def model():
    m_fc1 = pyro.param("m_fc1", torch.zeros((400, 50)))
    m_fc1_b = pyro.param("m_fc1_b", torch.zeros(400))
    m_fc21 = pyro.param("m_fc21", torch.zeros((784, 400)))
    m_fc21_b = pyro.param("m_fc21_b", torch.zeros(784))
    wm = Wrapper_for_Model()
    wm.run(m_fc1, m_fc1_b, m_fc21, m_fc21_b)


def guide():
    m_fc1 = pyro.param("m_fc1", torch.zeros((400, 50)))
    m_fc1_b = pyro.param("m_fc1_b", torch.zeros(400))
    m_fc21 = pyro.param("m_fc21", torch.zeros((784, 400)))
    m_fc21_b = pyro.param("m_fc21_b", torch.zeros(784))
    g_fc1 = pyro.param("g_fc1", torch.zeros((400, 784)))
    g_fc1_b = pyro.param("g_fc1_b", torch.zeros(400))
    g_fc21 = pyro.param("g_fc21", torch.zeros((50, 400)))
    g_fc21_b = pyro.param("g_fc21_b", torch.zeros(50))
    g_fc22 = pyro.param("g_fc22", torch.zeros((50, 400)))
    g_fc22_b = pyro.param("g_fc22_b", torch.zeros(50))
    pm = Proposal_for_Model()
    pm.run(m_fc1, m_fc1_b, m_fc21, m_fc21_b, g_fc1, g_fc1_b, g_fc21, g_fc21_b, g_fc22, g_fc22_b, x)


cond_model = pyro.condition(model, data=data)


_, gi = timeit(test, cond_model, guide)
print("generated code inference time: %fs" % gi)


{{ HANDWRITTEN }}


cond_hmodel = pyro.condition(hmodel, data=data)


_, gi = timeit(test, cond_hmodel, hguide)
print("hand-written code inference time: %fs" % gi)
