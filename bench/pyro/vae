type Latent
type Observation

proc Model
  [ m_fc1: (real; [400; 50]) tensor
  ; m_fc1_b: (real; [400]) tensor
  ; m_fc21: (real; [784; 400]) tensor
  ; m_fc21_b: (real; [784]) tensor
  ]() -> unit | lat : Latent | obs : Observation = {
  _ <- loop[256; ()] (fn (acc: unit) ->
    z_loc <- { return T.zeros[50]() };
    z_scale <- { return T.ones[50]() };
    z <- observe{lat}(D.normal[50](z_loc; z_scale));
    hidden <- { return T.softplus[400](T.mulmv[400; 50](m_fc1; z) + m_fc1_b) };
    loc_img <- { return T.sigmoid[784](T.mulmv[784; 400](m_fc21; hidden) + m_fc21_b) };
    _ <- sample{obs}(D.ber[784](loc_img));
    return ());
  return ()
}

proc Guide
  [ g_fc1: (real; [400; 784]) tensor
  ; g_fc1_b: (real; [400]) tensor
  ; g_fc21: (real; [50; 400]) tensor
  ; g_fc21_b: (real; [50]) tensor
  ; g_fc22: (real; [50; 400]) tensor
  ; g_fc22_b: (real; [50]) tensor
  ](xs: (real; [256; 784]) tensor) -> unit | . | lat : Latent = {
  _ <- iter[xs; ()] (fn x (acc: unit) ->
    hidden <- { return T.softplus[400](T.mulmv[400; 784](g_fc1; x) + g_fc1_b) };
    z_loc <- { return T.mulmv[50; 400](g_fc21; hidden) + g_fc21_b };
    z_scale <- { return T.exp[50](T.mulmv[50; 400](g_fc22; hidden) + g_fc22_b) };
    _ <- sample{lat}(D.normal[50](z_loc; z_scale));
    return ());
  return ()
}

infer {
  svi {
    niters: 100;
    optim: {
      algo: "adam";
      lr: 0.001;
    };
  }; # algo
  Model[
    T.zeros[400; 50]();
    T.zeros[400]();
    T.zeros[784; 400]();
    T.zeros[784]()
  ](); # model
  Guide[
    T.zeros[400; 784]();
    T.zeros[400]();
    T.zeros[50; 400]();
    T.zeros[50]();
    T.zeros[50; 400]();
    T.zeros[50]()
  ]("vae_guide_xs.in"); # guide
  obs <- "vae.in"; # input
  lat <- "vae.out"; # output
}
